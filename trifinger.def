# Install the BLMC_EI project software in the image so it can be used without
# building
Bootstrap: localimage
From: {{ BASE_IMAGE }}

%arguments
    BASE_IMAGE=trifinger_base.sif
    REALTIME_BUILD=false

%files
    {{ WS_DIR }} /opt/blmc_ei

%post -c /bin/bash
    set -o errexit
    set -o pipefail

    export DEBIAN_FRONTEND=noninteractive
    export XDG_CACHE_HOME=/_cache
    export UV_SYSTEM_PYTHON=1
    export UV_LINK_MODE=copy
    export UV_COMPILE_BYTECODE=1

    NOW=`date`
    echo "export IMAGE_BUILD_DATE=\"${NOW}\"" >> $SINGULARITY_ENVIRONMENT

    cd /opt/blmc_ei

    # store git revision of each package (so we know which versions were used)
    for d in src/*/
    do
        echo "${d#*/}"
        git -C "$d" describe --always 2> /dev/null
        git --no-pager -C "$d" show --pretty='[%cs] %d: %s' --no-patch 2> /dev/null
        git -C "$d" status -s 2> /dev/null
        echo ""
    done > git_status.txt

    # explicitly set OS version to preempt-rt if REALTIME_BUILD=true
    if [ {{ REALTIME_BUILD }} = true ]; then
        CMAKE_ARG_OS_VERSION=-DOS_VERSION=preempt-rt
    else
        CMAKE_ARG_OS_VERSION=
    fi

    (
        . /setup.bash
        colcon build --cmake-args -DCMAKE_BUILD_TYPE=Release ${CMAKE_ARG_OS_VERSION}
    )
    echo ". /opt/blmc_ei/install/local_setup.bash" >> /setup.bash

    # activate the workspace before installing rrc_2022_datasets, so
    # dependencies can be found
    (
        . /setup.bash
        uv pip install git+https://github.com/rr-learning/rrc_2022_datasets.git@v1
    )
    # The command above somehow pulls a newer version of OpenCV (>=4.2.0.34) in
    # while 4.2.0 (without .34) is already installed and sufficient.
    # The problem is that the pip-installed version does not include the codecs
    # for MP4 videos, so get rid of it.
    uv pip uninstall opencv-python

    # cleanup build and source files to reduce image size
    rm -rf build src log

%runscript
    # run something with environment set up
    bash -c ". /setup.bash; $*"
