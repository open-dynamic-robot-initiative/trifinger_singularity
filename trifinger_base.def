Bootstrap: docker
From: ros:foxy-ros-base

# To save time when rebuilding the image, you can pull the ROS image once and
# then use the following instead:
#Bootstrap: localimage
#From: ./ros_foxy-ros-base.sif

%post
    ROS_DISTRO=foxy

    apt-get update
    apt-get dist-upgrade -y

    # Build Dependencies
    # ==================

    apt-get install -y clang clang-format wget python3-pip curl

    apt-get install -y \
        freeglut3-dev \
        graphviz \
        libarmadillo-dev \
        libcereal-dev \
        libedit-dev \
        libncurses5-dev \
        libopenblas-dev \
        libopencv-dev \
        libopencv-contrib-dev \
        libxmu-dev \
        libyaml-cpp-dev \
        ros-${ROS_DISTRO}-ament-cmake-nose \
        ros-${ROS_DISTRO}-xacro \
        ros-${ROS_DISTRO}-yaml-cpp-vendor

    # upgrade pip
    pip3 --no-cache-dir install --upgrade pip

    # for building documentation
    apt-get install -y doxygen
    pip3 --no-cache-dir install \
        doxypypy \
        sphinx \
        m2r \
        recommonmark \
        breathe \
        sphinxcontrib-moderncmakedomain \
        sphinx-rtd-theme

    # for code formatting
    pip3 --no-cache-dir install black cmakelang


    # Tools for Debugging
    # ===================

    apt-get install -y \
        gdb \
        valgrind \
        tmux \
        less \
        ipython3 \
        python3-ipdb \
        python3-psutil


    # Run Dependencies
    # ================

    apt-get install -y \
        python3-empy \
        python3-matplotlib \
        python3-numpy \
        python3-opencv \
        python3-pandas \
        python3-progressbar \
        python3-yaml

    # we unfortunately need a newer version of scipy for the Rotation class
    pip3 --no-cache-dir install scipy==1.5.4

    pip3 --no-cache-dir install pybullet==3.0.8
    pip3 --no-cache-dir install gym==0.18.0
    pip3 --no-cache-dir install namegenerator

    # Add robotpkg apt repository
    # deb [arch=amd64] http://robotpkg.openrobots.org/wip/packages/debian/pub $(lsb_release -sc) robotpkg
    tee /etc/apt/sources.list.d/robotpkg.list <<EOF
deb [arch=amd64] http://robotpkg.openrobots.org/packages/debian/pub $(lsb_release -sc) robotpkg
EOF
    # Register the authentication certificate of robotpkg
    curl http://robotpkg.openrobots.org/packages/debian/robotpkg.key | apt-key add -
    apt-get update
    apt-get install -y robotpkg-py38-pinocchio


    # clean up
    apt-get clean

    # create a setup file
    echo ". /opt/ros/${ROS_DISTRO}/setup.bash
source /usr/share/colcon_argcomplete/hook/colcon-argcomplete.bash
source /usr/share/colcon_cd/function/colcon_cd.sh
" > /setup.bash

%environment
    export PATH=/opt/openrobots/bin:$PATH
    export PKG_CONFIG_PATH=/opt/openrobots/lib/pkgconfig:$PKG_CONFIG_PATH
    export LD_LIBRARY_PATH=/opt/openrobots/lib:$LD_LIBRARY_PATH
    export PYTHONPATH=/opt/openrobots/lib/python3.8/site-packages:$PYTHONPATH

%labels
    Version 2.0.0

%help
    Container for building the BLMC_EI/ROBOT_FINGER project.
    Run it with `singularity shell` at the root of your workspace, set up the
    environment by executing `source /setup.sh` and build with `colcon build`.
